// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// VCF_to_BinaryDosage
int VCF_to_BinaryDosage(std::string vcfFilename, std::string outBaseFilename, unsigned int initSub);
RcppExport SEXP GxEScanR_VCF_to_BinaryDosage(SEXP vcfFilenameSEXP, SEXP outBaseFilenameSEXP, SEXP initSubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type vcfFilename(vcfFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type outBaseFilename(outBaseFilenameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type initSub(initSubSEXP);
    rcpp_result_gen = Rcpp::wrap(VCF_to_BinaryDosage(vcfFilename, outBaseFilename, initSub));
    return rcpp_result_gen;
END_RCPP
}
// ExtractDosages
Rcpp::List ExtractDosages(std::string bdosageFilename, std::string mapFilename, unsigned int numSub, unsigned int numSNPs);
RcppExport SEXP GxEScanR_ExtractDosages(SEXP bdosageFilenameSEXP, SEXP mapFilenameSEXP, SEXP numSubSEXP, SEXP numSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdosageFilename(bdosageFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type mapFilename(mapFilenameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type numSub(numSubSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type numSNPs(numSNPsSEXP);
    rcpp_result_gen = Rcpp::wrap(ExtractDosages(bdosageFilename, mapFilename, numSub, numSNPs));
    return rcpp_result_gen;
END_RCPP
}
// ExtractMoreDosages
Rcpp::List ExtractMoreDosages(Rcpp::List inputs);
RcppExport SEXP GxEScanR_ExtractMoreDosages(SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type inputs(inputsSEXP);
    rcpp_result_gen = Rcpp::wrap(ExtractMoreDosages(inputs));
    return rcpp_result_gen;
END_RCPP
}
// GxEMerge
int GxEMerge(bool logistic, Rcpp::StringVector basefileNames, std::string outfileName);
RcppExport SEXP GxEScanR_GxEMerge(SEXP logisticSEXP, SEXP basefileNamesSEXP, SEXP outfileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type logistic(logisticSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type basefileNames(basefileNamesSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfileName(outfileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GxEMerge(logistic, basefileNames, outfileName));
    return rcpp_result_gen;
END_RCPP
}
// ScanSNPs
Rcpp::List ScanSNPs(const arma::vec& y, const arma::mat& x, std::string BedFilename, std::string MapFilename, std::string outFilename, bool dg, bool dgxe, bool twodf, bool threedf, bool ge, bool caseOnly, bool controlOnly, bool dgge);
RcppExport SEXP GxEScanR_ScanSNPs(SEXP ySEXP, SEXP xSEXP, SEXP BedFilenameSEXP, SEXP MapFilenameSEXP, SEXP outFilenameSEXP, SEXP dgSEXP, SEXP dgxeSEXP, SEXP twodfSEXP, SEXP threedfSEXP, SEXP geSEXP, SEXP caseOnlySEXP, SEXP controlOnlySEXP, SEXP dggeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type BedFilename(BedFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type MapFilename(MapFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type outFilename(outFilenameSEXP);
    Rcpp::traits::input_parameter< bool >::type dg(dgSEXP);
    Rcpp::traits::input_parameter< bool >::type dgxe(dgxeSEXP);
    Rcpp::traits::input_parameter< bool >::type twodf(twodfSEXP);
    Rcpp::traits::input_parameter< bool >::type threedf(threedfSEXP);
    Rcpp::traits::input_parameter< bool >::type ge(geSEXP);
    Rcpp::traits::input_parameter< bool >::type caseOnly(caseOnlySEXP);
    Rcpp::traits::input_parameter< bool >::type controlOnly(controlOnlySEXP);
    Rcpp::traits::input_parameter< bool >::type dgge(dggeSEXP);
    rcpp_result_gen = Rcpp::wrap(ScanSNPs(y, x, BedFilename, MapFilename, outFilename, dg, dgxe, twodf, threedf, ge, caseOnly, controlOnly, dgge));
    return rcpp_result_gen;
END_RCPP
}
// ReadGeneticFile
Rcpp::List ReadGeneticFile(std::string BedFilename, unsigned int numSubjects, std::string MapFilename, std::string SNP);
RcppExport SEXP GxEScanR_ReadGeneticFile(SEXP BedFilenameSEXP, SEXP numSubjectsSEXP, SEXP MapFilenameSEXP, SEXP SNPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type BedFilename(BedFilenameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type numSubjects(numSubjectsSEXP);
    Rcpp::traits::input_parameter< std::string >::type MapFilename(MapFilenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type SNP(SNPSEXP);
    rcpp_result_gen = Rcpp::wrap(ReadGeneticFile(BedFilename, numSubjects, MapFilename, SNP));
    return rcpp_result_gen;
END_RCPP
}
